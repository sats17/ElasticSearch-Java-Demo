#  Maven
#  Build your Java project and run tests with Apache Maven.
#  Add steps that analyze code, save build artifacts, deploy, and more:
#  https://docs.microsoft.com/azure/devops/pipelines/languages/java
 
 trigger:
 - master
 
 pool:
   vmImage: 'ubuntu-latest'
 
 steps:
  - task: SonarCloudPrepare@1
    displayName: 'Prepare analysis configuration'
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'sats17'
      scannerMode: Other
      # Additional properties that will be passed to the scanner,
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      extraProperties: |
        sonar.coverage.jacoco.xmlReportPaths=CCReport43F6D5EF/jacoco.xml
        # Initial behavior of Maven task is that the SonarScanner uses information contained in Maven
        # object model to provide smart defaults for most of the standard analysis parameters.
        # You can however override this by setting wanted properties in this extraProperties space.
        # Read more about this : https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-maven/#header-4

  - task: Maven@3
    displayName: 'Execute Maven goal'
    inputs:
      mavenPomFile: 'pom.xml'
      options: '-Dmaven.test.failure.ignore=true'
      mavenOptions: '-Xmx3072m'
      mavenVersionOption: 'Default'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      mavenAuthenticateFeed: true
      effectivePomSkip: true
      sonarQubeRunAnalysis: true
      sqMavenPluginVersionChoice: 'latest'
      codeCoverageToolOption: 'JaCoCo'
      testResultsFiles: '**/TEST-*.xml'
      goals: 'deploy'


# Uncomment the next task to wait until SonarCloud processing has
# finished and to publish the result on the Pipeline build summary
  - task: SonarCloudPublish@1
    displayName: 'Publish results on build summary'
    inputs:
      pollingTimeoutSec: '300'

  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  #     ArtifactName: 'drop'
  #     publishLocation: 'Container'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**/*.jar'
      TargetFolder: '$(build.artifactstagingdirectory)'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
  
  